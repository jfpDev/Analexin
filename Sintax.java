
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\017\000\002\002\004\000\002\002\026\000\002\006" +
    "\014\000\002\003\005\000\002\003\006\000\002\003\007" +
    "\000\002\003\007\000\002\003\006\000\002\003\006\000" +
    "\002\003\010\000\002\003\015\000\002\003\027\000\002" +
    "\004\017\000\002\005\020\000\002\007\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\154\000\004\006\005\001\002\000\004\002\156\001" +
    "\002\000\004\052\006\001\002\000\004\051\007\001\002" +
    "\000\004\007\010\001\002\000\004\052\011\001\002\000" +
    "\004\054\012\001\002\000\004\052\013\001\002\000\004" +
    "\054\014\001\002\000\004\033\015\001\002\000\004\051" +
    "\016\001\002\000\004\010\017\001\002\000\004\013\020" +
    "\001\002\000\004\052\021\001\002\000\004\014\022\001" +
    "\002\000\004\052\023\001\002\000\004\044\024\001\002" +
    "\000\010\005\025\021\027\055\030\001\002\000\006\040" +
    "\140\052\137\001\002\000\004\010\066\001\002\000\004" +
    "\054\036\001\002\000\004\054\031\001\002\000\004\052" +
    "\032\001\002\000\004\030\033\001\002\000\004\052\034" +
    "\001\002\000\004\051\035\001\002\000\014\005\ufff8\010" +
    "\ufff8\021\ufff8\045\ufff8\055\ufff8\001\002\000\004\052\037" +
    "\001\002\000\004\054\040\001\002\000\004\052\041\001" +
    "\002\000\004\042\042\001\002\000\004\004\043\001\002" +
    "\000\004\052\044\001\002\000\006\004\045\052\046\001" +
    "\002\000\004\043\063\001\002\000\004\052\047\001\002" +
    "\000\004\052\050\001\002\000\004\052\051\001\002\000" +
    "\004\004\052\001\002\000\004\031\053\001\002\000\004" +
    "\042\054\001\002\000\004\052\055\001\002\000\004\033" +
    "\056\001\002\000\004\052\057\001\002\000\004\043\060" +
    "\001\002\000\004\043\061\001\002\000\004\051\062\001" +
    "\002\000\014\005\ufff6\010\ufff6\021\ufff6\045\ufff6\055\ufff6" +
    "\001\002\000\004\051\064\001\002\000\014\005\ufff7\010" +
    "\ufff7\021\ufff7\045\ufff7\055\ufff7\001\002\000\004\010\122" +
    "\001\002\000\004\015\067\001\002\000\004\016\070\001" +
    "\002\000\004\050\071\001\002\000\004\042\072\001\002" +
    "\000\004\005\073\001\002\000\004\046\074\001\002\000" +
    "\004\047\075\001\002\000\004\052\076\001\002\000\004" +
    "\043\077\001\002\000\004\044\100\001\002\000\004\017" +
    "\102\001\002\000\004\045\120\001\002\000\004\044\103" +
    "\001\002\000\010\005\025\021\027\055\030\001\002\000" +
    "\010\005\025\021\027\055\030\001\002\000\010\005\025" +
    "\021\027\055\030\001\002\000\004\045\107\001\002\000" +
    "\004\020\110\001\002\000\004\042\111\001\002\000\004" +
    "\022\112\001\002\000\004\052\113\001\002\000\004\043" +
    "\114\001\002\000\004\044\115\001\002\000\010\005\025" +
    "\021\027\055\030\001\002\000\004\045\117\001\002\000" +
    "\004\045\ufff4\001\002\000\004\010\ufff5\001\002\000\004" +
    "\045\136\001\002\000\004\052\123\001\002\000\004\042" +
    "\124\001\002\000\004\005\125\001\002\000\004\052\135" +
    "\001\002\000\004\005\125\001\002\000\004\043\130\001" +
    "\002\000\004\044\131\001\002\000\010\005\025\021\027" +
    "\055\030\001\002\000\010\005\025\021\027\055\030\001" +
    "\002\000\004\045\134\001\002\000\004\045\uffff\001\002" +
    "\000\006\005\ufff3\043\ufff3\001\002\000\004\002\000\001" +
    "\002\000\014\030\147\037\143\040\146\051\145\052\144" +
    "\001\002\000\004\052\141\001\002\000\004\051\142\001" +
    "\002\000\014\005\ufff9\010\ufff9\021\ufff9\045\ufff9\055\ufff9" +
    "\001\002\000\004\053\154\001\002\000\004\051\153\001" +
    "\002\000\014\005\ufffe\010\ufffe\021\ufffe\045\ufffe\055\ufffe" +
    "\001\002\000\004\051\152\001\002\000\004\053\150\001" +
    "\002\000\004\051\151\001\002\000\014\005\ufffb\010\ufffb" +
    "\021\ufffb\045\ufffb\055\ufffb\001\002\000\014\005\ufffa\010" +
    "\ufffa\021\ufffa\045\ufffa\055\ufffa\001\002\000\014\005\ufffd" +
    "\010\ufffd\021\ufffd\045\ufffd\055\ufffd\001\002\000\004\051" +
    "\155\001\002\000\014\005\ufffc\010\ufffc\021\ufffc\045\ufffc" +
    "\055\ufffc\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\154\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\025\001\001" +
    "\000\002\001\001\000\004\004\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\103\001" +
    "\001\000\004\003\104\001\001\000\004\003\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\125\001\001\000" +
    "\002\001\001\000\004\007\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\131\001\001\000\004\003" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= CLASE EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // CLASE ::= Package Identificador PuntoYcoma Import Identificador Punto Identificador Punto Multiplicacion PuntoYcoma Public Class Identificador Extends Identificador Llave_Abierta SENTENCIA METODO_MAIN METODO Llave_Cerrada 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CLASE",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-19)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // METODO ::= Public Identificador Parentesis_Abierto ARGUMENTO ARGUMENTO Parentesis_Cerrado Llave_Abierta SENTENCIA SENTENCIA Llave_Cerrada 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= Tipo_Dato Identificador PuntoYcoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= Tipo_Dato Identificador Identificador PuntoYcoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= Tipo_Dato Identificador Operador_Atribucion Numero PuntoYcoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= Tipo_Dato Identificador Igual Numero PuntoYcoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= Tipo_Dato Identificador Operador_InDec PuntoYcoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= Tipo_Dato Operador_InDec Identificador PuntoYcoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= This Punto Identificador Igual Identificador PuntoYcoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= sysCall Punto Identificador Punto Identificador Parentesis_Abierto Comillas Identificador Comillas Parentesis_Cerrado PuntoYcoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= sysCall Punto Identificador Punto Identificador Parentesis_Abierto Comillas Identificador Identificador Identificador Identificador Identificador Comillas Suma Parentesis_Abierto Identificador Multiplicacion Identificador Parentesis_Cerrado Parentesis_Cerrado PuntoYcoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-20)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // METODO_MAIN ::= Public Static Void Main Parentesis_Abierto Tipo_Dato Corchete_Abierto Corchete_Cerrado Identificador Parentesis_Cerrado Llave_Abierta TRY_CATCH Llave_Cerrada 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO_MAIN",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TRY_CATCH ::= Try Llave_Abierta SENTENCIA SENTENCIA SENTENCIA Llave_Cerrada Catch Parentesis_Abierto Excepcion Identificador Parentesis_Cerrado Llave_Abierta SENTENCIA Llave_Cerrada 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TRY_CATCH",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ARGUMENTO ::= Tipo_Dato Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
    }
}

}
